var l=Object.defineProperty;var w=(o,t,s)=>t in o?l(o,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):o[t]=s;var I=(o,t,s)=>w(o,typeof t!="symbol"?t+"":t,s);class d{constructor(t,s,e){this.remote=t,this.userId=s,this.appId=e}buildItemUrl(t,s){return new URL(`${this.remote}/${this.userId}/${this.appId}/${t}/${s}`)}buildListUrl(t){return new URL(`${this.remote}/${this.userId}/${this.appId}/${t}/`)}async getItemList(t){const s=this.buildListUrl(t);return await(await fetch(s)).json()}async getItem(t,s){const e=this.buildItemUrl(t,s);return await(await fetch(e)).text()}async setItem(t,s,e){const n=this.buildItemUrl(t,s);await fetch(n,{method:"POST",body:e})}async delItem(t,s){const e=this.buildItemUrl(t,s);await fetch(e,{method:"DELETE"})}}const r=class r{constructor(t,s,e){this.host=t,this.userId=s,this.appId=e}static build(t,s,e){return t!=null&&(t.startsWith("https://")||t.startsWith("http://"))&&s!=null&&s.length>0&&e!=null&&e.length>0?new r(t,s,e):null}async backup(t){const s=new d(this.host,this.userId,this.appId);await s.setItem(r.BUCKET_ID_SETTINGS,"default",JSON.stringify(t.settings));const e=t.tasks.map(i=>i.id);await s.setItem(r.BUCKET_ID_TASKS,"ids",JSON.stringify(e));for(const i of t.tasks)await s.setItem(r.BUCKET_ID_TASKS,i.id,JSON.stringify(i));const n=t.invoices.map(i=>i.id);await s.setItem(r.BUCKET_ID_INVOICES,"ids",JSON.stringify(n));for(const i of t.invoices)await s.setItem(r.BUCKET_ID_INVOICES,i.id,JSON.stringify(i))}async getStoredValueOrDefault(t,s,e,n){try{const i=await t.getItem(s,e);if(i==null)return n;const c=JSON.parse(i);return c??n}catch{return n}}async getStoredValueOrThrow(t,s,e){try{const n=await t.getItem(s,e),i=JSON.parse(n);if(i==null)throw new Error(`Object is undefined after parsing and casting. JSON: ${n}`);return i}catch(n){throw new Error(`Unable to get stored value for key ${e} in bucket ${s}. ${n}`)}}async getData(){const t=new d(this.host,this.userId,this.appId);let s=await this.getStoredValueOrThrow(t,r.BUCKET_ID_SETTINGS,"default");const e=await this.getStoredValueOrDefault(t,r.BUCKET_ID_TASKS,"ids",[]),n=[];for await(const h of e)try{const a=await this.getStoredValueOrThrow(t,r.BUCKET_ID_TASKS,h);n.push(a)}catch(a){console.error(a)}const i=await this.getStoredValueOrDefault(t,r.BUCKET_ID_INVOICES,"ids",[]),c=[];for await(const h of i)try{const a=await this.getStoredValueOrThrow(t,r.BUCKET_ID_INVOICES,h);c.push(a)}catch(a){console.error(a)}return{settings:s,tasks:n,invoices:c}}};I(r,"BUCKET_ID_SETTINGS","settings"),I(r,"BUCKET_ID_TASKS","tasks"),I(r,"BUCKET_ID_INVOICES","invoices");let u=r;export{d as K,u as a};
